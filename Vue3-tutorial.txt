Bài 2: Event handling
<style>
	.card {
		display: flex;
		align-content: center;
		justify-content: center;
		width: 180px;
		height: 180px;
		bg: #dedede;
		mb: 30px;
	}
</style>
- event-handling.html:
<section id="contact">
	.cart-container
		.cart @mouseover="onLogEvent"> Mouse over (ENTER)
		.cart @mouseleave="onLogEvent"> Mouse leave
		.cart @dblclick="onLogEvent"> Double click
		.cart @mousemove="onMouseMoveEvent"> Mouse move {{ `${x}-${y}` }}
		.cart @dblclick="onLogEvent($event, 150,100)"> Double click
</section>

- event-handling.js:
method: {
	onLogEvent(){
		console.log("running event...");
	},
	
	//Muốn xem thông số thì thêm e hoặc event vào:
	onLogEvent(event){
		console.log("running event...", event);
	},

	onMouseMoveEvent(event){
		console.log("running mouse move event...", event);
		this.x = event.offsetX;
		this.y = event.offsetY;
	},

	//Sự kiện double click hiển thị tọa độ:
	onLogEvent(event, newX, newY){
		console.log("running event...", event);
		this.x = newX;
		this.y = newY;
	},
}
==================================================================================
Bài 4: Đi sâu vào component
1. Component & Global Styles
-Fix lỗi tạo mới component:
 + Vào trang editorconfig.org để copy code sang bên file bên dưới
 + new file: .editorconfig:
   [*]
   end_of_line = lf
   insert_final_newline = true
   indent_style = space
   indent_size = 2

-> khi tạo component mới mà chưa fix lại thì ctrl+s lần đầu là được

- src/components/ tạo Modal.vue:
+ Vào trang getbootstrap.com/docs/5.0/components/modal/
  Để lấy code modal bên trong đó
+ <template>
   .modal.fade.show
     .modal-dialog
       .modal-content
	 .modal-header
	 .modal-body
	 .modal-footer

  <style scoped lang="css"> //scoped chỉ áp dụng cho chính nơi chứa nó thôi
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1060;
      //display: none;
      display: block;
      width: 100%;
      height: 100%;
      overflow-x: hidden;
      overflow-y: auto;
      outline: 0;
      bg-color: rgba(0,0,0,0.2);
    }

    .fade {
      transition: opacity .15s linear;
    }

    .modal.fade .modal-dialog {
      transition: transform .3s ease-out;
      transform: translate(0,-50px);
    }

    .modal-dialog {
      max-width: 500px;
      margin: 4.75rem auto;
    }

    .modal-dialog {
      position: relative;
      width: auto;
      margin: 0.5rem;
      pointer-events: none;
    }

.modal-content {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    pointer-events: auto;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid rgba(0,0,0,.2);
    border-radius: 0.3rem;
    outline: 0;
}

.modal-header {
    display: flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1rem;
    border-bottom: 1px solid #dee2e6;
    border-top-left-radius: calc(0.3rem - 1px);
    border-top-right-radius: calc(0.3rem - 1px);
}

.modal-body {
    position: relative;
    flex: 1 1 auto;
    padding: 1rem;
}

.modal-footer {
    display: flex;
    flex-wrap: wrap;
    flex-shrink: 0;
    align-items: center;
    justify-content: flex-end;
    padding: 0.75rem;
    border-top: 1px solid #dee2e6;
    border-bottom-right-radius: calc(0.3rem - 1px);
    border-bottom-left-radius: calc(0.3rem - 1px);
}

- src/App.vue:
<script>
   import Modal from "./components/Modal.vue";
   ...
    components:{
     BaseModal: Modal,
    }

<template>
   h1.fade: Hello from vue cli =))
   <base-modal />


<style>
   #app{
     BỎ margin-top: 60px;
   }

- src/assets/css/global.css:
 + ctrl+x #app{} trong <style> của App.vue paste sang đây

- src/main.js:
import "./assets/css/global.css";

- vào trong trang: https://meyerweb.com/eric/tools/css/reset/
 + copy code reset css paste vào trên đầu file: src/assets/css/global.css
---------------------------------------------------------------------------------
2. Props & Notes:
- MyModal.vue:
<template>
.modal-content :class="{ 'bg-purple' : theme === 'contact' }"
.modal-header
  h2: {{ title }}
.modal-body
  p: {{ content }}

<script>
export default{
 props: {
  title: {
   type: String,
   required: true,
  },
  content: {
   type: String,
   default: "",
  },
  theme: {
   type: String,
   default: "example",
   validator(value){
    return ["example", "sales", "contact"].includes(value);
   }
  }
}
 data(){
  return{
   //title: "This is title",
  };
 }
}

<style>
  .modal-content.bg-purple{
   background-color: purple;
  }

- App.vue:
<template>
 ...
 <base-modal title="Đây là tiêu đề gọi từ App.vue" 
	     content="Để rỗng hoặc có nd"
	     theme="example(/sales/contact)"
---------------------------------------------------------------------------------
3. Emit events child to parent component:phát ra các sự kiện con cho 
thành phần mẹ.
- App.vue:
<template>
  <base-modal v-if="isShowModal"
              ...
	      @cancel="onToggleModal"
  />
  <button @click="onToggleModal"> Toggle modal

<script>
  export default{
   ...
   data(){
    return{
     isShowModal: false,
    };
   },
   method: {
    onToggleModal(){
     this.isShowModal = !this.isShowModal;
    }
   }
  }

- MyModal.vue:
<template>
  .modal.fade(bỏ class .show đi) @click="onCloseModal"

<script>
  ...
  data(){},
  methods:{
   onCloseModal(){
    this.$emit("cancel");
   }
  }

---------------------------------------------------------------------------------
4. Slot (chỗ, vị trí).
- App.vue:
<template>
  <base-modal ...>
    <template v-slot:header>
      h2: this is header
    <template v-slot:footer>
      button @click="onToggleModal": Cancel
    <label> name
    <input type="password" />
  </base-modal>

- MyModal.vue:
<template>
  .modal-header
    <slot name="header"></slot>
  .modal-body
    <slot />
  .modal-footer
    <slot name="footer"></slot>

---------------------------------------------------------------------------------
5. Event Modifiers.
- vào trang event modifier vue js: https://vuejs.org/guide/essentials
/event-handling.html#event-modifiers để copy sự kiện
- MyModal.vue:
<template>
  .modal.fade @click.self="onCloseModal"

---------------------------------------------------------------------------------
6. Teleport Component.(thành phần dịch chuyển)
- Vào trang teleport vue3: https://vuejs.org/guide/built-ins/teleport.html
(nó là 1 thẻ html)
- App.vue:
<template>
  <teleport to="body">
    paste <base-modal> vào trong
  </teleport>
->Khi đó base-modal sẽ là con trực tiếp của thẻ body
==================================================================================
Bài 5: Binding dữ liệu trong form input cùng ví dụ
1. Docs and setup
2. Sử dụng v-model cho input & textarea
- QuizForm.vue:
<script>
  export default{
    data(){
      return{
	quiz: {
	  fullName: "Phùng An Bình",
	  email: "",
	  desc: "",
	}
      }
    }
  }

<template>
  ...
  label: What is your full name?
  input... v-model="quiz.fullName"
  {{ quiz.fullName }}
  label: What is your email address?
  input... v-model="quiz.email"
  {{ quiz.email }}
  label: What is your project all about?
  textarea... v-model="quiz.desc"
  {{ quiz.desc }}
---------------------------------------------------------------------------------
3. Xử lý tốt hơn với @submit trong form.
- QuizForm.vue:
<template>
  Đổi thẻ div đầu tiên thành thẻ form
  form.screen @submit.prevent="onSubmit" //prevent: sau khi submit sẽ ko chuyển 
trang. Lúc này chúng ta bỏ sự kiện @click="onSubmit" ở nút button bên dưới đi
  .action
    ...
    button.btn.btn-submit type="submit" @click="onSubmit": Submit

<script>
  data(){},
  methods: {
   onSubmit(){
    console.log(this.quiz);
   }
  }

---------------------------------------------------------------------------------
4. Sử dụng v-model cho checkbox, select, radio.
- QuizForm.vue:
<template>
  .section .options
  .col-4 v-for="option in jobOptions" :key="option.id"
   label.option
    span: {{ option.name }}
    input type="checkbox" :value="option.id" v-model="quiz.jobs"
  ...
  span: Branding
  input type="checkbox" checked v-model="branding" /> //bỏ checked đi

  span: Strategy
  input type="checkbox" v-model="strategy" />

  span: Motion Design
  input type="checkbox" v-model="motionDesign" />

<script>
  data(){
   ...
   quiz:{
    ...
    jobs: [],
   },
   //motionDesign: false,
   jobOptions: [
    {
     id: 1,
     name: "Branding",
    },
    {
     id: 2,
     name: "Strategy",
    },
    {
     id: 3,
     name: "Motion Design",
    },
    {
     id: 4,
     name: "Development",
    },
    {
     id: 5,
     name: "Product Design",
    },
    {
     id: 6,
     name: "Marketing",
    },
    {
     id: 7,
     name: "Copywriting",
    },
    {
     id: 8,
     name: "Advisory",
    },
    {
     id: 9,
     name: "Compositing",
    },
   ]
  },
  methods: {
   onSubmit(){
    ...
    //console.log(this.motionDesign);
   }
  }

- global.css:
.section.options .col-4{
 margin: 0 0.5rem;
 margin-bottom: 1rem;
}
---------------------------------------------------------------------------------
Chạy project trên máy khác -> cmd: yarn install / npm install
5. Practices and validation form.
- QuizForm.vue:
<template>
  label: What is your full name?
  input :class="{ error: error.status, success: success.status }"
  p.error-text v-if="error.status">{{ error.text }}
  p.success-text v-if="success.status">{{ success.text }}
  .section .options
  .col-4 v-for="option in jobOptions" :key="option.id"
   .block :style="{backgroundColor: quiz.jobs.includes(option.id) ? 
		   'var(--primary)' : ''}"

<script>
  ...
  quiz:{},
  error:{
   text: "",
   status:false,
  },
  success:{
   text: "",
   status:false,
  },
  ...
  methods: {
   onSubmit(){
    if(this.quiz.fullName.length < 6 || this.quiz.fullName.length > 18){
     this.error = {
      text: "Error! Full name should be 6-18 characters.",
      status: true,
     }
    }else if(this.quiz.fullName.length > 5 && this.quiz.fullName.length < 19){
     this.success = {
      text: "Look great ^^",
      status: true,
     }
    }else{
     this.error = {
      text: "",
      status:false,
     }
    }
   }
  }

- global.css:
.form-item input.error{
  border-color: var(--error);
}

.error-text{
 margin-top: 0.25rem;
 color: var(--error);
}

.form-item input.success{
  border-color: var(--primary);
}

.success-text{
 margin-top: 0.25rem;
 color: var(--primary);
}
==================================================================================
Bài 6: Vue Router 4 & thay đổi nho nhỏ
1. Thêm vue router 4 vào dự án
- Vào trang router.vuejs.org đổi sang v4.x
b1: get started
b2: Tạo dự án mới:
+ vue create money_tasks -> manually ... -> Babel + enter -> v3s -> Prettier
-> lint and fix: space and enter -> In dedicated .... -> n
+ cd money_tasks -> code . ->quay lại cmd: yarn add vue-router@4 (trong docs router vue v4.x)
b3: config lại file
- .editorconfig: (vào trang editorconfig copy code về)
   # EditorConfig is awesome: https://EditorConfig.org

   # top-most EditorConfig file
   root = true

   # Unix-style newlines with a newline ending every file
   [*]
   end_of_line = lf
   insert_final_newline = true
   indent_style = space
   indent_size = 2

b4:
- src/router.js:
import { createRouter, createWebHashHistory } from "vue-router";
import Home from "./pages/home";

const routes = [
 {
  path: "/",
  component: Home,
 }
];

const router = createRouter({
 history: createWebHashHistory(process.env.BASE_URL),
 routes,
});

export default router;

- src/pages/home.vue:
<template>
 <h1>Homepage is here

- src/main.js:
import router from "./router";

createApp(App).use(router).mount("#app");

b5: Chạy dự án lên:
+ vào package.json -> bấm Debug -> serve vue-cli-service serve
--------------------------------------------------------------------------------------------
2. router-link component.
- Xóa file HelloWorld.vue trong components đi -> tạo file components/Nav.vue:
<template>
  <nav class="nav"
    <router-link to="/">Overview</router-link>
    <router-link to="/transactions">Transactions</router-link>
    <router-link to="/">Budgets</router-link>
    <router-link to="/">Reports</router-link>
    <router-link to="/">Settings</router-link>

- src/App.vue:
<template>
  <base-nav />

<script>
import Nav from "./components/Nav.vue"
...
  components:{
    BaseNav: Nav,
  }

- src/pages/transactions.vue:
<template>
  <h1>Transactions is here...

- src/router.js:
...
import Transactions from "./pages/transactions"
const routes = [
  {
    path: "/transactions",
    component: Transactions,
  }
]
--------------------------------------------------------------------------------------------
3. Routes params.
- src/router.js:
import TransactionDetails from "./pages/transaction-details"
const routes = [
  {
    path: "/transactions/:id",
    component: Transactions,
  }
]

- src/pages/transaction-details.vue:
<template>
  h1: Transaction details pages is here...
  h1: {{ $route.params.id }}


[
  -> copy object trên màn hình -> qua bên console: const testing = paste
  -> console.log({testing})
]
--------------------------------------------------------------------------------------------
4. Dynamic links.
- src/pages/transactions.vue:
<template>
  ...
  <div class="item" v-for="transaction in transactions" :key="transaction.id">
    <router-link :to="`/transactions/${transaction.id}`">{{ transaction.name }}</router-link>

    <div class="price"> Price: {{ transaction.price }}
<script>
export default {
  data(){
    return{
      transactions:[
      {
       id: 1,
       name: 'Phùng An Bình',
       salary: 300
      },
      {
       id: 2,
       name: 'Nguyễn Đình Thìn',
       salary: 600
      },
      {
       id: 3,
       name: 'Phạm Mỹ Kha',
       salary: 350
      },
     ]
    }
  }
}

- src/App.vue:
- Bỏ đi css #app{
  text-align: center;
  -webkit...;
  -moz-osx...;
}
================================================
npm run lint -- --fix :để sửa lỗi --fix option
================================================
--------------------------------------------------------------------------------------------
5. Redirects & điều hướng 404's.
- src/router.js:
import NotFound from "./pages/404"
...
{
 path: "/ts",
 redirect: "/transactions",
},
//{
// path: "*",
// component: NotFound,
//},
{
 path: "/:pathMatch(.*)*",
 component: NotFound,
}

- src/pages/404.vue:
<template>
 h1: 404 not found
--------------------------------------------------------------------------------------------
6. Code improvements.
- src/router.js:
import { createRouter, createWebHistory } from "vue-router";
...
{
 path: "/",
 name: "overview-route",
 component: Home,
},
{
 path: "/transactions",
 name: "transaction-route",
 component: Transactions,
},
{
 path: "/transactions/:id",
 name: "transaction-details-route",
 component: TransactionDetails,
},

-> nếu có sửa path thì đường dẫn vẫn chạy bình thường với name, chỉ thay đổi tên path 
nhưng vẫn link đến trang ban đầu định tuyến sẵn

...
const router = createRouter({
 history: createWebHistory(process.env.BASE_URL),
 routes,
}); //->Sửa createWebHashHistory thành createWebHistory để ko còn dấu # trên link nữa 

- src/components/NavTag.vue:
<template>
  <nav class="nav"
    <router-link :to="{ name: 'overview-route' }">Overview</router-link>
    <router-link :to="{ name: 'transaction-route' }">Transactions</router-link>
    <router-link to="/">Budgets</router-link>
    <router-link to="/">Reports</router-link>
    <router-link to="/">Settings</router-link>

- src/pages/transactions.vue:
<div class="item" v-for="transaction in transactions" :key="transaction.id">
    <router-link 
      :to="{
	name: 'transaction-details-route',
	params: { id: transaction.id },
      }"
    >{{ transaction.name }}</router-link>
==================================================================================
Bài 7: Fetching Data & Vue JS Component Lifecycle
1. Setup Json Server
- search gg: json server -> https://www.npmjs.com/package/json-server 
- cmd admin: 
+ npm install -g json-server
+ json-server
- chạy lại cmd thường: json-server
- vào dự án tạo folder data/db.json:
{
 "transactions": [
  {
   "id": 1,
   "name": "Go to something",
   "price": 100000
  },
  {
   "id": 2,
   "name": "Buy something",
   "price": 200000
  },
 ]
}
- đi vào folder chứa dự án -> cmd -> json-server --watch data/db.json -> copy Resources 
paste vào gg xem thử có data chưa (data server fake)
--------------------------------------------------------------------------------------------
2. Vue Lifecycle Hooks.
3. Fetch All Data
- gg: fetch javascript
- src/pages/transactions.vue:
+ xóa dữ liệu trong transaction[], đi
+ data(){},
created(){
 fetch("http://localhost:3000/transactions")
   .then((response) => response.json())
   .then((data) => (this.transactions = data));
},

- chạy lại: json-server --watch data/db.json
- vào xem console log hiển thị lên chưa
- vào file json sửa lại và thêm dữ liệu mới sau đó chạy lại
--------------------------------------------------------------------------------------------
4. Fetch One & Loading...
- src/pages/transaction-details.vue:
<template>
 <div v-if="transaction">
   <h1>Id: {{ $route.params.id }}
   <h3>Name: {{ transaction.name }}
   <p>Price: {{ transaction.price }}
 <div v-else>Loading transaction {{ $route.params.id }}
...
data(){
 return{
  transaction: null,
 }
},
created(){
 fetch("http://localhost:3000/transactions/" + this.$route.params.id)
   .then((response) => response.json())
   .then((data) => (this.transaction = data))
   .then(() => console.log(this.transaction));
},

- inspect ->chọn network -> No throttling: slow 3G -> reload page + quan sát
- src/pages/transactions.vue:
<div v-if="transactions.length">
  <div class="item">
<div v-else> Loading transactions...
- inspect ->chọn network -> No throttling: slow 3G -> reload page + quan sát
==================================================================================
Bài 8: Composition API "trong" Vue 3
1. Data & Methods trong Composition API
- src/pages/home-page.vue:
<template>
 h1
 //p: {{ firstName }}
 p: {{ secondName }} //Lúc sau mới làm dòng này
 p: {{ car }}
 button @click="onChangeSomeThing">Click me

<script>
import { ref, reactive } from "vue";
export default{
 setup(){
  const firstName = ref("Binh Phung");
  const secondName = ref({
    name: "Hoa",
    something: "female"
  });
  const car = reactive({
   price: 100000,
   name: "Mazda"
  });

  function onChangeSomeThing(){
   console.log("running here..."); 
   car.price = 200000;
   secondName.value.name = "Hoa Thi"
   firstName.value = "Tran Toan";
   console.log(firstName);
   console.log(secondName);
   console.log(car);
  }

  return { car, firstName, secondName onChangeSomeThing };
 }
}
- chạy dự án lên
1.1. ref()
1.2. reactive() and note
- vào trong function onChangeSomeThing() xóa hết đi:
let car = reactive({
   price: 100000,
   name: "Mazda"
  });

function onChangeSomeThing(){
 secondName.value = {
  name: "Nguyen Phu",
  something: "Sharing",
 };
 car = {
  price: 500000,
  something: "toyota",
 };
 console.log(secondName);
 console.log(car);
}
1.3. unref()
--------------------------------------------------------------------------------------------
1.4. Computed in composition API
- src/pages/home-page.vue:
<template>
 <input type="text" v-model="searchText">
 ul>li v-for="(customer, index) in customersFilted" :key="index"
      {{ customer }}

<script>
 import { computed, ref, reactive } from "vue";
 export default{
 setup(){
  const searchText = ref("");
  const customers = reactive(["Something", "Binh Phung", "Anh Tran", "Duy Nguyen"]);
  const customersFilled = computed(() =>
   customers
    .map((customer) => {
      customer = customer.toLowerCase();
      return customer;
    })
    .filter((customer) => customer.includes(searchText.value.toLowerCase()))
  )
  //bỏ console.log đi
  return { searchText, customersFilted };
 }
--------------------------------------------------------------------------------------------
1.5. Watch & WatchEffect
- src/pages/home-page.vue:

<script>
 import { ..., watch, watchEffect } from "vue";
 ...
 watch(searchText, (newValue, oldValue) => {
  console.log(newValue, oldValue);
 });

 watchEffect(() => {
  if(searchText.value){
   console.log("Run again");
  }
 });
- mở cửa sổ console.log lên xem kết quả
==================================================================================
Bài 9: Setup() Params & Fetching Data trong Composition API
1. Params trong setup().
- src/pages/home-page.vue:
<script>

export default {
 props: {
  theme: {
   type: String,
   required: false,
   default: "light",
  },
 },
 //EX1
 setup(props, context) {
  console.log(props);
  console.log(context);
 }
 //END EX1

 // eslint-disable-next-line...
 setup({theme}, {emit}) {
  console.log(theme);
  console.log(emit);
 }
}
--------------------------------------------------------------------------------------------
2. Chú ý thêm về Lifecycle Hooks Composition API
3. Fetching Data trong setup()
- src/pages/transactions-page.vue:
<template>
 ...
 <div v-else-if="error">{{ error.message }}
<script>
import { ref } from "vue";
export default{
  //data(){},
  //created(){},
  setup(){
   const transactions = ref([]);
   const error = ref(null);

   //console.log(transactions, error);

   const fetchAll = async () => {
    try{
     const response = await fetch("http://localhost:3000/transactions");
     //(1)console.log(response);
     if(!response.ok) throw new Error("Something went wrong.");
      //(2)console.log(await response.json());
      transactions.value = await response.json();
    }catch(err){
     error.value = err;
     console.log(error.value);
    }
    
   };
   fetchAll();

   return { error, transactions };
  },
};














